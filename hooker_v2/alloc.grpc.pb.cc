// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: alloc.proto

#include "alloc.pb.h"
#include "alloc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* CudaAllocator_method_names[] = {
  "/CudaAllocator/Malloc",
  "/CudaAllocator/Free",
};

std::unique_ptr< CudaAllocator::Stub> CudaAllocator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CudaAllocator::Stub> stub(new CudaAllocator::Stub(channel));
  return stub;
}

CudaAllocator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Malloc_(CudaAllocator_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Free_(CudaAllocator_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CudaAllocator::Stub::Malloc(::grpc::ClientContext* context, const ::MallocRequest& request, ::MallocReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Malloc_, context, request, response);
}

void CudaAllocator::Stub::experimental_async::Malloc(::grpc::ClientContext* context, const ::MallocRequest* request, ::MallocReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Malloc_, context, request, response, std::move(f));
}

void CudaAllocator::Stub::experimental_async::Malloc(::grpc::ClientContext* context, const ::MallocRequest* request, ::MallocReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Malloc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MallocReply>* CudaAllocator::Stub::PrepareAsyncMallocRaw(::grpc::ClientContext* context, const ::MallocRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MallocReply>::Create(channel_.get(), cq, rpcmethod_Malloc_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::MallocReply>* CudaAllocator::Stub::AsyncMallocRaw(::grpc::ClientContext* context, const ::MallocRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMallocRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CudaAllocator::Stub::Free(::grpc::ClientContext* context, const ::FreeRequest& request, ::FreeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Free_, context, request, response);
}

void CudaAllocator::Stub::experimental_async::Free(::grpc::ClientContext* context, const ::FreeRequest* request, ::FreeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Free_, context, request, response, std::move(f));
}

void CudaAllocator::Stub::experimental_async::Free(::grpc::ClientContext* context, const ::FreeRequest* request, ::FreeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Free_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FreeReply>* CudaAllocator::Stub::PrepareAsyncFreeRaw(::grpc::ClientContext* context, const ::FreeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::FreeReply>::Create(channel_.get(), cq, rpcmethod_Free_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::FreeReply>* CudaAllocator::Stub::AsyncFreeRaw(::grpc::ClientContext* context, const ::FreeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFreeRaw(context, request, cq);
  result->StartCall();
  return result;
}

CudaAllocator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CudaAllocator_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CudaAllocator::Service, ::MallocRequest, ::MallocReply>(
          [](CudaAllocator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MallocRequest* req,
             ::MallocReply* resp) {
               return service->Malloc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CudaAllocator_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CudaAllocator::Service, ::FreeRequest, ::FreeReply>(
          [](CudaAllocator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FreeRequest* req,
             ::FreeReply* resp) {
               return service->Free(ctx, req, resp);
             }, this)));
}

CudaAllocator::Service::~Service() {
}

::grpc::Status CudaAllocator::Service::Malloc(::grpc::ServerContext* context, const ::MallocRequest* request, ::MallocReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CudaAllocator::Service::Free(::grpc::ServerContext* context, const ::FreeRequest* request, ::FreeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


