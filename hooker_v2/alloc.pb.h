// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alloc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_alloc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_alloc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_alloc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_alloc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_alloc_2eproto;
class FreeReply;
class FreeReplyDefaultTypeInternal;
extern FreeReplyDefaultTypeInternal _FreeReply_default_instance_;
class FreeRequest;
class FreeRequestDefaultTypeInternal;
extern FreeRequestDefaultTypeInternal _FreeRequest_default_instance_;
class MallocReply;
class MallocReplyDefaultTypeInternal;
extern MallocReplyDefaultTypeInternal _MallocReply_default_instance_;
class MallocRequest;
class MallocRequestDefaultTypeInternal;
extern MallocRequestDefaultTypeInternal _MallocRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FreeReply* Arena::CreateMaybeMessage<::FreeReply>(Arena*);
template<> ::FreeRequest* Arena::CreateMaybeMessage<::FreeRequest>(Arena*);
template<> ::MallocReply* Arena::CreateMaybeMessage<::MallocReply>(Arena*);
template<> ::MallocRequest* Arena::CreateMaybeMessage<::MallocRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class MallocRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MallocRequest) */ {
 public:
  inline MallocRequest() : MallocRequest(nullptr) {}
  virtual ~MallocRequest();

  MallocRequest(const MallocRequest& from);
  MallocRequest(MallocRequest&& from) noexcept
    : MallocRequest() {
    *this = ::std::move(from);
  }

  inline MallocRequest& operator=(const MallocRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MallocRequest& operator=(MallocRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MallocRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MallocRequest* internal_default_instance() {
    return reinterpret_cast<const MallocRequest*>(
               &_MallocRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MallocRequest& a, MallocRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MallocRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MallocRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MallocRequest* New() const final {
    return CreateMaybeMessage<MallocRequest>(nullptr);
  }

  MallocRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MallocRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MallocRequest& from);
  void MergeFrom(const MallocRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MallocRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MallocRequest";
  }
  protected:
  explicit MallocRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alloc_2eproto);
    return ::descriptor_table_alloc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // uint64 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MallocRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alloc_2eproto;
};
// -------------------------------------------------------------------

class MallocReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MallocReply) */ {
 public:
  inline MallocReply() : MallocReply(nullptr) {}
  virtual ~MallocReply();

  MallocReply(const MallocReply& from);
  MallocReply(MallocReply&& from) noexcept
    : MallocReply() {
    *this = ::std::move(from);
  }

  inline MallocReply& operator=(const MallocReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MallocReply& operator=(MallocReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MallocReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MallocReply* internal_default_instance() {
    return reinterpret_cast<const MallocReply*>(
               &_MallocReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MallocReply& a, MallocReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MallocReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MallocReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MallocReply* New() const final {
    return CreateMaybeMessage<MallocReply>(nullptr);
  }

  MallocReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MallocReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MallocReply& from);
  void MergeFrom(const MallocReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MallocReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MallocReply";
  }
  protected:
  explicit MallocReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alloc_2eproto);
    return ::descriptor_table_alloc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemHandleFieldNumber = 1,
  };
  // bytes mem_handle = 1;
  void clear_mem_handle();
  const std::string& mem_handle() const;
  void set_mem_handle(const std::string& value);
  void set_mem_handle(std::string&& value);
  void set_mem_handle(const char* value);
  void set_mem_handle(const void* value, size_t size);
  std::string* mutable_mem_handle();
  std::string* release_mem_handle();
  void set_allocated_mem_handle(std::string* mem_handle);
  private:
  const std::string& _internal_mem_handle() const;
  void _internal_set_mem_handle(const std::string& value);
  std::string* _internal_mutable_mem_handle();
  public:

  // @@protoc_insertion_point(class_scope:MallocReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mem_handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alloc_2eproto;
};
// -------------------------------------------------------------------

class FreeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FreeRequest) */ {
 public:
  inline FreeRequest() : FreeRequest(nullptr) {}
  virtual ~FreeRequest();

  FreeRequest(const FreeRequest& from);
  FreeRequest(FreeRequest&& from) noexcept
    : FreeRequest() {
    *this = ::std::move(from);
  }

  inline FreeRequest& operator=(const FreeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FreeRequest& operator=(FreeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FreeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FreeRequest* internal_default_instance() {
    return reinterpret_cast<const FreeRequest*>(
               &_FreeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FreeRequest& a, FreeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FreeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FreeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FreeRequest* New() const final {
    return CreateMaybeMessage<FreeRequest>(nullptr);
  }

  FreeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FreeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FreeRequest& from);
  void MergeFrom(const FreeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FreeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FreeRequest";
  }
  protected:
  explicit FreeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alloc_2eproto);
    return ::descriptor_table_alloc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtrToFreeFieldNumber = 1,
  };
  // uint64 ptr_to_free = 1;
  void clear_ptr_to_free();
  ::PROTOBUF_NAMESPACE_ID::uint64 ptr_to_free() const;
  void set_ptr_to_free(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ptr_to_free() const;
  void _internal_set_ptr_to_free(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:FreeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ptr_to_free_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alloc_2eproto;
};
// -------------------------------------------------------------------

class FreeReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FreeReply) */ {
 public:
  inline FreeReply() : FreeReply(nullptr) {}
  virtual ~FreeReply();

  FreeReply(const FreeReply& from);
  FreeReply(FreeReply&& from) noexcept
    : FreeReply() {
    *this = ::std::move(from);
  }

  inline FreeReply& operator=(const FreeReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FreeReply& operator=(FreeReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FreeReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FreeReply* internal_default_instance() {
    return reinterpret_cast<const FreeReply*>(
               &_FreeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FreeReply& a, FreeReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FreeReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FreeReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FreeReply* New() const final {
    return CreateMaybeMessage<FreeReply>(nullptr);
  }

  FreeReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FreeReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FreeReply& from);
  void MergeFrom(const FreeReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FreeReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FreeReply";
  }
  protected:
  explicit FreeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alloc_2eproto);
    return ::descriptor_table_alloc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:FreeReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alloc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MallocRequest

// uint64 size = 1;
inline void MallocRequest::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MallocRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MallocRequest::size() const {
  // @@protoc_insertion_point(field_get:MallocRequest.size)
  return _internal_size();
}
inline void MallocRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void MallocRequest::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:MallocRequest.size)
}

// -------------------------------------------------------------------

// MallocReply

// bytes mem_handle = 1;
inline void MallocReply::clear_mem_handle() {
  mem_handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MallocReply::mem_handle() const {
  // @@protoc_insertion_point(field_get:MallocReply.mem_handle)
  return _internal_mem_handle();
}
inline void MallocReply::set_mem_handle(const std::string& value) {
  _internal_set_mem_handle(value);
  // @@protoc_insertion_point(field_set:MallocReply.mem_handle)
}
inline std::string* MallocReply::mutable_mem_handle() {
  // @@protoc_insertion_point(field_mutable:MallocReply.mem_handle)
  return _internal_mutable_mem_handle();
}
inline const std::string& MallocReply::_internal_mem_handle() const {
  return mem_handle_.Get();
}
inline void MallocReply::_internal_set_mem_handle(const std::string& value) {
  
  mem_handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MallocReply::set_mem_handle(std::string&& value) {
  
  mem_handle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MallocReply.mem_handle)
}
inline void MallocReply::set_mem_handle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mem_handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MallocReply.mem_handle)
}
inline void MallocReply::set_mem_handle(const void* value,
    size_t size) {
  
  mem_handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MallocReply.mem_handle)
}
inline std::string* MallocReply::_internal_mutable_mem_handle() {
  
  return mem_handle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MallocReply::release_mem_handle() {
  // @@protoc_insertion_point(field_release:MallocReply.mem_handle)
  return mem_handle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MallocReply::set_allocated_mem_handle(std::string* mem_handle) {
  if (mem_handle != nullptr) {
    
  } else {
    
  }
  mem_handle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mem_handle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MallocReply.mem_handle)
}

// -------------------------------------------------------------------

// FreeRequest

// uint64 ptr_to_free = 1;
inline void FreeRequest::clear_ptr_to_free() {
  ptr_to_free_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FreeRequest::_internal_ptr_to_free() const {
  return ptr_to_free_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FreeRequest::ptr_to_free() const {
  // @@protoc_insertion_point(field_get:FreeRequest.ptr_to_free)
  return _internal_ptr_to_free();
}
inline void FreeRequest::_internal_set_ptr_to_free(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ptr_to_free_ = value;
}
inline void FreeRequest::set_ptr_to_free(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ptr_to_free(value);
  // @@protoc_insertion_point(field_set:FreeRequest.ptr_to_free)
}

// -------------------------------------------------------------------

// FreeReply

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_alloc_2eproto
